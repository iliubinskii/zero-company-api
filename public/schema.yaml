openapi: 3.0.0

# Info
info:
  title: Zero Company API
  description: An API for Zero Company application
  version: 2024.5.11-1

# Servers
servers:
  - url: https://api.zero-company.app

# Paths
paths:

  /:
    get:
      summary: Get API status
      tags:
        - root
      responses:
        "200":
          $ref: "#/components/responses/Home"

  # Companies path
  /companies:
    get:
      summary: Get all companies
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"
    post:
      summary: Create a new company
      tags:
        - companies
      responses:
        "201":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidCompanyData"

  # Company path
  /companies/{id}:
    get:
      summary: Get a company by ID
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "404":
          $ref: "#/components/responses/CompanyNotFound"
    delete:
      summary: Delete a company by ID
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    put:
      summary: Update a company by ID
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidCompanyData"
        "404":
          $ref: "#/components/responses/CompanyNotFound"

  # Users path
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/UserList"
        "400":
          $ref: "#/components/responses/InvalidQuery"

  # User path
  /users/{email}:
    parameters:
      - $ref: '#/components/parameters/Email'
    delete:
      summary: Delete a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/UserNotFound"
    post:
      summary: Create a new user
      tags:
        - users
      responses:
        "201":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidUserData"
        "409":
          $ref: "#/components/responses/UserAlreadyExists"
    put:
      summary: Update a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidUserData"
        "404":
          $ref: "#/components/responses/UserNotFound"

  # User companies path
  /users/{email}/companies:
    parameters:
      - $ref: '#/components/parameters/Email'
    get:
      summary: Get all companies for a user
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"

  # BadRequest response
  /400:
    get:
      summary: Bad request
      tags:
        - common
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"

  # NotFound response
  /404:
    get:
      summary: Not found
      tags:
        - common
      responses:
        "404":
          $ref: "#/components/responses/NotFound"

  # InternalServerError response
  /500:
    get:
      summary: Internal server error
      tags:
        - common
      responses:
        "500":
          $ref: "#/components/responses/InternalServerError"

# Components
components:

  # Parameters
  parameters:

    # Email parameter
    Email:
      name: email
      in: path
      required: true
      schema:
        type: string

    # Id parameter
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string

  # Responses
  responses:

    # BadRequest response
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"

    # Company response
    Company:
      description: Company
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Company"

    # CompanyList response
    CompanyList:
      description: Company list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CompanyList"

    # CompanyNotFound response
    CompanyNotFound:
      description: Company not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CompanyNotFound"

    # Delete response
    Delete:
      description: Delete
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Delete"

    # Home response
    Home:
      description: Home
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Home"

    # InternalServerError response
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"

    # InvalidQuery response
    InvalidQuery:
      description: Invalid query
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidQuery"

    # InvalidUserData response
    InvalidUserData:
      description: Invalid user data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidUserData"

    # InvalidCompanyData response
    InvalidCompanyData:
      description: Invalid company data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidCompanyData"

    # NotFound response
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"

    # User response
    User:
      description: User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    # UserAlreadyExists response
    UserAlreadyExists:
      description: User already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserAlreadyExists"

    # UserList response
    UserList:
      description: User list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserList"

    # UserNotFound response
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserNotFound"

  # Schemas
  schemas:

    # BadRequest schema
    BadRequest:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - BadRequest
            - InvalidEmailParam
            - InvalidIdParam
        errorMessage:
          type: string

    # Company schema
    Company:
      type: object
      required:
        - _id
        - categories
        - description
        - foundedAt
        - founders
        - images
        - logo
        - targetValue
        - name
      properties:
        _id:
          type: string
        categories:
          type: array
          items: 
            type: string
        description:
          type: string
        foundedAt:
          type: string
        founders:
          type: array
          items:
            $ref: '#/components/schemas/Founder'
        images:
          type: array
          items:
            $ref: '#/components/schemas/WebAccessibleImage'
        logo:
          $ref: '#/components/schemas/WebAccessibleImage'
        name:
          type: string
        privateCompany:
          type: boolean
        recommended:
          type: boolean
        targetValue:
          type: number
        website:
          type: string

    # CompanyList schema
    CompanyList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        nextCursor:
          type: array
          items:
            type: string
        total:
          type: integer

    # CompanyNotFound schema
    CompanyNotFound:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - CompanyNotFound
        errorMessage:
          type: string

    # Delete schema
    Delete:
      type: object
      required:
        - affectedRows
      properties:
        affectedRows:
          type: integer

    # Founder schema
    Founder:
      type: object
      required:
        # - _id
        - email
        - firstName
        - lastName
        - share
      properties:
        # _id:
        #   type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        share:
          type: number
        confirmed:
          type: boolean


    # Home schema
    Home:
      type: object
      required:
        - schema
        - status
      properties:
        schema:
          type: string
        status:
          type: string
          enum:
            - OK

    # InternalServerError schema
    InternalServerError:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - InternalServerError
        errorMessage:
          type: string

    # InvalidCompanyData schema
    InvalidCompanyData:
      type: object
      required:
        - error
        - errorMessage
        - data
      properties:
        error:
          type: string
          enum:
            - InvalidCompanyData
        errorMessage:
          type: string
        data:
          type: array
          items:
            type: object
            required:
              - message
              - path
            properties:
              message:
                type: string
              path:
                type: string

    # InvalidIdParam schema
    InvalidIdParam:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - InvalidIdParam
        errorMessage:
          type: string

    # InvalidQuery schema
    InvalidQuery:
      type: object
      required:
        - error
        - errorMessage
        - data
      properties:
        error:
          type: string
          enum:
            - InvalidQuery
        errorMessage:
          type: string
        data:
          type: array
          items:
            type: object
            required:
              - message
              - path
            properties:
              message:
                type: string
              path:
                type: string

    # InvalidUserData schema
    InvalidUserData:
      type: object
      required:
        - error
        - errorMessage
        - data
      properties:
        error:
          type: string
          enum:
            - InvalidUserData
        errorMessage:
          type: string
        data:
          type: array
          items:
            type: object
            required:
              - message
              - path
            properties:
              message:
                type: string
              path:
                type: string

    # NotFound schema
    NotFound:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - NotFound
        errorMessage:
          type: string

    # User schema
    User:
      type: object
      required:
        - _id
        - email
        - firstName
        - lastName
      properties:
        _id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    # UserAlreadyExists schema
    UserAlreadyExists:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - UserAlreadyExists
        errorMessage:
          type: string

    # UserList schema
    UserList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/User"
        nextCursor:
          type: array
          items:
            type: string
        total:
          type: integer

    # UserNotFound schema
    UserNotFound:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - UserNotFound
        errorMessage:
          type: string

    # WebAccessibleImage schema
    WebAccessibleImage:
      type: object
      required:
        - assetId
        - height
        - width
        - secureUrl
        - url
      properties:
        assetId:
          type: string
        height:
          type: number
        width:
          type: number
        url:
          type: string
        secureUrl:
          type: string