openapi: 3.0.0

# Info
info:
  title: Zero Company API
  description: An API for Zero Company application
  version: 2024.6.7

# Servers
servers:
  - url: https://api.zero-company.app

# Paths
paths:

  /:
    get:
      summary: Get API status
      tags:
        - root
      responses:
        "200":
          $ref: "#/components/responses/Home"

  # Auth path
  /auth/me:
    get:
      summary: Get authentication response
      tags:
        - auth
      responses:
        "200":
          $ref: "#/components/responses/AuthUser"

  # Categories path
  /categories:
    get:
      summary: Get all categories
      tags:
        - categories
      responses:
        "200":
          $ref: "#/components/responses/CategoryList"
        "400":
          $ref: "#/components/responses/InvalidQuery"
    post:
      summary: Create a new category
      tags:
        - categories
      responses:
        "201":
          $ref: "#/components/responses/Category"
        "400":
          $ref: "#/components/responses/InvalidData"

  # Category path
  /categories/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Delete a category by ID
      tags:
        - categories
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a category by ID
      tags:
        - categories
      responses:
        "200":
          $ref: "#/components/responses/Category"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a category by ID
      tags:
        - categories
      responses:
        "200":
          $ref: "#/components/responses/Category"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  # Category companies path
  /categories/{id}/companies:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get all companies for a category
      tags:
        - categories
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"

  # Companies path
  /companies:
    get:
      summary: Get all companies
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"
    post:
      summary: Create a new company
      tags:
        - companies
      responses:
        "201":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidData"

  # Company path
  /companies/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Delete a company by ID
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a company by ID
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a company by ID
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"


  # Company images path
  /companies/{id}/images:
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      summary: Upload a new image for a company
      tags:
        - companies
      responses:
        "201":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  /companies/{id}/images/{assetId}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/AssetId'
    delete:
      summary: Delete an image for a company
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update an image for a company
      tags:
        - companies
      responses:
        "200":
          $ref: "#/components/responses/Company"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  # Documents path
  /documents:
    get:
      summary: Get all documents
      tags:
        - documents
      responses:
        "200":
          $ref: "#/components/responses/DocumentList"
        "400":
          $ref: "#/components/responses/InvalidQuery"
    post:
      summary: Create a new document
      tags:
        - documents
      responses:
        "201":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/InvalidData"

  # Document path
  /documents/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Delete a document by ID
      tags:
        - documents
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a document by ID
      tags:
        - documents
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a document by ID
      tags:
        - documents
      responses:
        "200":
          $ref: "#/components/responses/Document"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  # Me path
  /me:
    delete:
      summary: Delete a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create a new user
      tags:
        - users
      responses:
        "201":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidData"
        "409":
          $ref: "#/components/responses/AlreadyExists"
    put:
      summary: Update a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  # Me companies path
  /me/companies:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get all companies for a user
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"

  # Users path
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/UserList"
        "400":
          $ref: "#/components/responses/InvalidQuery"
    post:
      summary: Create a new user
      tags:
        - users
      responses:
        "201":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidData"
        "409":
          $ref: "#/components/responses/AlreadyExists"

  # User path
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Delete a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/Delete"
    get:
      summary: Get a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a user by ID
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/User"
        "400":
          $ref: "#/components/responses/InvalidData"
        "404":
          $ref: "#/components/responses/NotFound"

  # User companies path
  /users/{id}/companies:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get all companies for a user
      tags:
        - users
      responses:
        "200":
          $ref: "#/components/responses/CompanyList"
        "400":
          $ref: "#/components/responses/InvalidQuery"

  # BadRequest response
  /400:
    get:
      summary: Bad request
      tags:
        - common
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"

  # Unauthorized response
  /401:
    get:
      summary: Unauthorized
      tags:
        - common
      responses:
        "401":
          $ref: "#/components/responses/Unauthorized"

  # NotFound response
  /404:
    get:
      summary: Not found
      tags:
        - common
      responses:
        "404":
          $ref: "#/components/responses/NotFound"

  # MethodNotAllowed response
  /405:
    get:
      summary: Method not allowed
      tags:
        - common
      responses:
        "405":
          $ref: "#/components/responses/MethodNotAllowed"

  # InternalServerError response
  /500:
    get:
      summary: Internal server error
      tags:
        - common
      responses:
        "500":
          $ref: "#/components/responses/InternalServerError"

# Components
components:

  # Parameters
  parameters:

    # Id parameter
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string
    AssetId:
      name: assetId
      in: path
      required: true
      schema:
        type: string

  # Responses
  responses:

    # AlreadyExists response
    AlreadyExists:
      description: Already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AlreadyExists"

    # Authentication response
    AuthUser:
      description: Authentication response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthUser"

    # BadRequest response
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequest"

    # Category response
    Category:
      description: Category
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"

    # CategoryList response
    CategoryList:
      description: Category list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryList"

    # Company response
    Company:
      description: Company
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Company"

    # CompanyList response
    CompanyList:
      description: Company list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CompanyList"

    # Delete response
    Delete:
      description: Delete
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Delete"

    # Document response
    Document:
      description: Document
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Document"

    # DocumentList response
    DocumentList:
      description: Document list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentList"

    # Home response
    Home:
      description: Home
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Home"

    # InternalServerError response
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"

    # InvalidData response
    InvalidData:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidData"

    # InvalidQuery response
    InvalidQuery:
      description: Invalid query
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidQuery"

    # MethodNotAllowed response
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MethodNotAllowed"

    # NotFound response
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"

    # Unauthorized response
    Unauthorized:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unauthorized"

    # User response
    User:
      description: User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    # UserList response
    UserList:
      description: User list
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserList"

  # Schemas
  schemas:

    # AlreadyExists schema
    AlreadyExists:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - AlreadyExists
        errorMessage:
          type: string

    # AuthUser schema
    AuthUser:
      type: object
      nullable: true
      required:
        - admin
        - email
      properties:
        admin:
          type: boolean
        email:
          type: string
        user:
          $ref: "#/components/schemas/User"

    # BadRequest schema
    BadRequest:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - BadRequest
            - InvalidIdParam
        errorMessage:
          type: string

    # Category schema
    Category:
      type: object
      required:
        - _id
        - description
        - name
        - tagline
      properties:
        _id:
          type: string
        description:
          type: string
        name:
          type: string
        pinned:
          type: boolean
        tagline:
          type: string

    # CategoryList schema
    CategoryList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        nextCursor:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        total:
          type: integer

    # Company schema
    Company:
      type: object
      required:
        - _id
        - categories
        - country
        - createdAt
        - founders
        - images
        - status
      properties:
        _id:
          type: string
        categories:
          type: array
          items:
            type: string
        country:
          type: string
          minLength: 2
          maxLength: 2
        createdAt:
          type: string
        description:
          type: string
        foundedAt:
          type: string
        founders:
          type: array
          items:
            $ref: '#/components/schemas/Founder'
        images:
          type: array
          items:
            $ref: '#/components/schemas/WebAccessibleImage'
        logo:
          $ref: '#/components/schemas/WebAccessibleImage'
        name:
          type: string
        privateCompany:
          type: boolean
        recommended:
          type: boolean
        status:
          type: string
          enum:
            - draft
            - founded
            - signing
        targetValue:
          type: number
        website:
          type: string

    # CompanyList schema
    CompanyList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        nextCursor:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        total:
          type: integer

    # Delete schema
    Delete:
      type: object
      required:
        - affectedRows
      properties:
        affectedRows:
          type: integer

    # DigitalDocument schema
    DigitalDocument:
      type: object
      required:
        - assetId
        - secureUrl
        - signatures
        - url
      properties:
        assetId:
          type: string
        secureUrl:
          type: string
        signatures:
          type: array
          items:
            type: string
        url:
          type: string

    # Document schema
    Document:
      type: object
      required:
        - _id
        - company
        - createdAt
        - signatories
        - type
      properties:
        _id:
          type: string
        company:
          type: string
        createdAt:
          type: string
        doc:
          $ref: '#/components/schemas/DigitalDocument'
        metadata:
          type: string
        signatories:
          type: array
          items:
            $ref: '#/components/schemas/Signatory'
        type:
          type: string
          enum:
            - FoundingAgreement

    # DocumentList schema
    DocumentList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/Document"
        nextCursor:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        total:
          type: integer

    # Founder schema
    Founder:
      type: object
      required:
        - email
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        share:
          type: number

    # Home schema
    Home:
      type: object
      required:
        - schema
        - status
      properties:
        schema:
          type: string
        status:
          type: string
          enum:
            - OK

    # InternalServerError schema
    InternalServerError:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - InternalServerError
        errorMessage:
          type: string

    # InvalidData schema
    InvalidData:
      type: object
      required:
        - error
        - errorMessage
        - data
      properties:
        error:
          type: string
          enum:
            - InvalidData
        errorMessage:
          type: string
        data:
          type: array
          items:
            type: object
            required:
              - message
              - path
            properties:
              message:
                type: string
              path:
                type: string

    # InvalidIdParam schema
    InvalidIdParam:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - InvalidIdParam
        errorMessage:
          type: string

    # InvalidQuery schema
    InvalidQuery:
      type: object
      required:
        - error
        - errorMessage
        - data
      properties:
        error:
          type: string
          enum:
            - InvalidQuery
        errorMessage:
          type: string
        data:
          type: array
          items:
            type: object
            required:
              - message
              - path
            properties:
              message:
                type: string
              path:
                type: string

    # MethodNotAllowed schema
    MethodNotAllowed:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - MethodNotAllowed
        errorMessage:
          type: string

    # NotFound schema
    NotFound:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - NotFound
        errorMessage:
          type: string

    # Signatory schema
    Signatory:
      type: object
      required:
        - email
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    # Unauthorized schema
    Unauthorized:
      type: object
      required:
        - error
        - errorMessage
      properties:
        error:
          type: string
          enum:
            - Unauthorized
        errorMessage:
          type: string

    # User schema
    User:
      type: object
      required:
        - _id
        - email
        - firstName
        - lastName
      properties:
        _id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    # UserList schema
    UserList:
      type: object
      required:
        - count
        - docs
        - total
      properties:
        count:
          type: integer
        docs:
          type: array
          items:
            $ref: "#/components/schemas/User"
        nextCursor:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        total:
          type: integer

    # WebAccessibleImage schema
    WebAccessibleImage:
      type: object
      required:
        - assetId
        - height
        - secureUrl
        - url
        - width
      properties:
        assetId:
          type: string
        height:
          type: number
        secureUrl:
          type: string
        url:
          type: string
        width:
          type: number
