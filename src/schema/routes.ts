/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get API status */
    get: {
      responses: {
        200: components["responses"]["Home"];
      };
    };
  };
  "/400": {
    /** Bad request */
    get: {
      responses: {
        400: components["responses"]["BadRequest"];
      };
    };
  };
  "/404": {
    /** Not found */
    get: {
      responses: {
        404: components["responses"]["NotFound"];
      };
    };
  };
  "/500": {
    /** Internal server error */
    get: {
      responses: {
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/users": {
    /** Get all users */
    get: {
      responses: {
        200: components["responses"]["UserList"];
        400: components["responses"]["InvalidQuery"];
      };
    };
  };
  "/users/{email}": {
    /** Delete a user by ID */
    delete: {
      parameters: {
        path: {
          email: components["parameters"]["Email"];
        };
      };
      responses: {
        200: components["responses"]["Delete"];
      };
    };
    /** Get a user by ID */
    get: {
      parameters: {
        path: {
          email: components["parameters"]["Email"];
        };
      };
      responses: {
        200: components["responses"]["User"];
        404: components["responses"]["UserNotFound"];
      };
    };
    parameters: {
      path: {
        email: components["parameters"]["Email"];
      };
    };
    /** Create a new user */
    post: {
      parameters: {
        path: {
          email: components["parameters"]["Email"];
        };
      };
      responses: {
        201: components["responses"]["User"];
        400: components["responses"]["InvalidUserData"];
        409: components["responses"]["UserAlreadyExists"];
      };
    };
    /** Update a user by ID */
    put: {
      parameters: {
        path: {
          email: components["parameters"]["Email"];
        };
      };
      responses: {
        200: components["responses"]["User"];
        400: components["responses"]["InvalidUserData"];
        404: components["responses"]["UserNotFound"];
      };
    };
  };
  "/users/{email}/companies": {
    /** Get all companies for a user */
    get: {
      parameters: {
        path: {
          email: components["parameters"]["Email"];
        };
      };
      responses: {
        200: components["responses"]["CompanyList"];
        400: components["responses"]["InvalidQuery"];
      };
    };
    parameters: {
      path: {
        email: components["parameters"]["Email"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  headers: never;
  parameters: {
    Email: string;
    Id: string;
  };
  pathItems: never;
  requestBodies: never;
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["BadRequest"];
      };
    };
    /** @description Company */
    Company: {
      content: {
        "application/json": components["schemas"]["Company"];
      };
    };
    /** @description Company list */
    CompanyList: {
      content: {
        "application/json": components["schemas"]["CompanyList"];
      };
    };
    /** @description Delete */
    Delete: {
      content: {
        "application/json": components["schemas"]["Delete"];
      };
    };
    /** @description Home */
    Home: {
      content: {
        "application/json": components["schemas"]["Home"];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["InternalServerError"];
      };
    };
    /** @description Invalid query */
    InvalidQuery: {
      content: {
        "application/json": components["schemas"]["InvalidQuery"];
      };
    };
    /** @description Invalid user data */
    InvalidUserData: {
      content: {
        "application/json": components["schemas"]["InvalidUserData"];
      };
    };
    /** @description Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["NotFound"];
      };
    };
    /** @description User */
    User: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** @description User already exists */
    UserAlreadyExists: {
      content: {
        "application/json": components["schemas"]["UserAlreadyExists"];
      };
    };
    /** @description User list */
    UserList: {
      content: {
        "application/json": components["schemas"]["UserList"];
      };
    };
    /** @description User not found */
    UserNotFound: {
      content: {
        "application/json": components["schemas"]["UserNotFound"];
      };
    };
  };
  schemas: {
    BadRequest: {
      /** @enum {string} */
      error: "BadRequest" | "InvalidEmailParam" | "InvalidIdParam";
      errorMessage: string;
    };
    Company: {
      _id: string;
    };
    CompanyList: {
      count: number;
      docs: components["schemas"]["Company"][];
      nextCursor?: string[];
      total: number;
    };
    Delete: {
      affectedRows: number;
    };
    Home: {
      schema: string;
      /** @enum {string} */
      status: "OK";
    };
    InternalServerError: {
      /** @enum {string} */
      error: "InternalServerError";
      errorMessage: string;
    };
    InvalidIdParam: {
      /** @enum {string} */
      error: "InvalidIdParam";
      errorMessage: string;
    };
    InvalidQuery: {
      data: {
        message: string;
        path: string;
      }[];
      /** @enum {string} */
      error: "InvalidQuery";
      errorMessage: string;
    };
    InvalidUserData: {
      data: {
        message: string;
        path: string;
      }[];
      /** @enum {string} */
      error: "InvalidUserData";
      errorMessage: string;
    };
    NotFound: {
      /** @enum {string} */
      error: "NotFound";
      errorMessage: string;
    };
    User: {
      _id: string;
      email: string;
      firstName: string;
      lastName: string;
    };
    UserAlreadyExists: {
      /** @enum {string} */
      error: "UserAlreadyExists";
      errorMessage: string;
    };
    UserList: {
      count: number;
      docs: components["schemas"]["User"][];
      nextCursor?: string[];
      total: number;
    };
    UserNotFound: {
      /** @enum {string} */
      error: "UserNotFound";
      errorMessage: string;
    };
  };
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
